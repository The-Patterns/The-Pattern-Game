package ru.game.pattern.model;

import java.awt.*;

/**
 * Created by Uskov Dmitry on 02.06.2016.
 */

/**
 * Родительский класс всех физических игровы объектов, т.е. тех, которые будут размещены на поле
 * содеражат в себе расширенный необходимый функционал по сравнению с классом GameObject
 */
public abstract class PhysicalGameObject extends GameObject {

    /**
     * Провека, выбран ли данный объект курсором
     * Данный метод является методом по умолчанию для всех дочерних классов.
     * По умолчанию объекты нельзя выделить курсором.
     * Чтобы реализовать эту возможность надо переопределить данный метод в дочернем классе, реализовавв там необходимую логику
     * @return true, если выбран, иначе false
     */
    public boolean isSeletedByCursor(){
        return false;
    };

    /**
     * Передает информацию объекту, выбран ли он курсором.
     * Данный метод является методом по умолчанию для всех дочерних классов.
     * По умолчанию объекты нельзя выделить курсором. Поэтому этот метод пустой
     * Чтобы реализовать эту возможность надо переопределить данный метод в дочернем классе, реализовавв там необходимую логику
     * @param selectedByCursor true, если объект выделен курсором, иначе false
     */
    public void setSelectedByCursor(boolean selectedByCursor){

    }

    /**
     * в данный метод передаются координаты, куда клинкнули курсором на экране (как приавло, нажатие ПКМ)
     * P.S. Как правило, этот метод вызывается, только у тех объектов, у котороых isSeletedByCursor() = true.
     * Но некоторым объектам иногда неоходимо получать информацию всегда обо всех кликах (как правило ПКМ) на экране.
     * @param point координаты, куда кликнули курсором.
     */
    abstract public void setClickCursorLocation(Point point);

    /**
     * Возвращает местоположение объекта на карте без учёта его размера (грубо говоря, возвращает координаты центра объекта)
     * @return местоположение объекта на карте
     */
    abstract public Point getLocation();

    /**
     * отмена выполнения всех действий
     */
    abstract void resetAction();

    /**
     * Возвращает радиус объекта (то пространство, которое он занимает)
     * @return
     */
    abstract public int getTerritoryRadius();

    /**
     * Возвращает расстояние между объектами.
     * @param gameObject  объект, с которым проверяется столкновение
     * @return расстояние между объектами. Если объекты налегли друг на друга, то число отрицательное.
     */
    abstract public int collision(PhysicalGameObject gameObject);

    /**
     * Возвращает расстояние между объектами.
     * Аналог функции abstract public int collision(PhysicalGameObject gameObject), но с другими вход параметрами
     * @param x координата x объекта, с которым проверяем столкновение
     * @param y координата y объекта, с которым проверяем столкновение
     * @param teritoryRadius радиус, обозначающий размер объекта, с которым проверяем столкновение
     * @return расстояние между объектами. Если объекты налегли друг на друга, то число отрицательное.
     */
    public abstract int collision(double x, double y, int teritoryRadius);
}
